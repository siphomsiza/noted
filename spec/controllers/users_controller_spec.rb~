require 'spec_helper'
require 'rails_helper'

RSpec.describe UsersController, :type => :controller do
  describe "#index" do
    context "User is admin and is logged in" do
      before do
        @user = create(:user)
        session[:user_id] = @user.id
        get :index
      end
      it "assigns @user" do
        user = User.create
        get :index
        expect(assigns(:user)).to be_a_new(User)
      end
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("index")}
      xit {expect(assigns(:roles).to eq(@users))}
      xit {expect(assigns(:activity_logs).to eq(@user_activities))}
      xit {expect(assigns(:super_user_activities).to eq(@super_user_activities))}
      xit {expect(assigns(:users).to eq(@users))}
      xit {expect(assigns(:admin_users).to eq(@admin_users))}
      xit {expect(assigns(:active_users).to eq(@active_users))}
      xit {expect(assigns(:inactive_users).to eq(@inactive_users))}
      xit {expect(assigns(:terminated_users).to eq(@terminated_users))}
      xit {expect(assigns(:new_users).to eq(@new_users))}
      xit {expect(assigns(:locked_users).to eq(@locked_users))}
      xit {expect(assigns(:user_login_attempts).to eq(@user_login_attempts))}
    end

    context "User is not logged in" do
      before do
        get :index
      end
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end

  end
  describe "#create" do
    context "when user is logged in" do

          before do
            @user = create(:user)
            session[:user_id] = @user.id
            get :new
          end
          it "" do
            post :create
          end
          it {expect(response.status).to eq(200) }
          it {expect(response.content_type).to eq("text/html") }
          it {expect(response).to render_template("create")}
        end
  end
  describe "#show" do
    before do
      @user = create(:user)
      get :show,:id => @user.id
    end
    context "user is logged on to the system" do
      it {response[0].must_equal 200}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("show")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#edit" do
    before do
      @user = create(:user)
      get :edit,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("edit")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#edit new user" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :edit_new_user,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("edit_new_user")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#edit active user" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :edit_active_user,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("edit_active_user")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#edit user profile" do
    before do
      @user = create(:user)
      get :edit_user_profile,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("edit_user_profile")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#update" do
    context "when user is logged in" do
          before do
            @user = create(:user)
            session[:user_id] = @user.id

          end
          it "" do
            put :update
          end
          it {expect(response.status).to eq(200) }
          it {expect(response.content_type).to eq("text/html") }
          it {flash[:success].should eq("user was successfully updated.")}
          it {expect(response).to redirect_to("/users")}
        end
  end
  describe "#deactivate" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :deactivate,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
     it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("/:id/deactivate")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#set admin" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :set_admin,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("/users")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
     it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#set maximum attempts" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :set_maximum_attempts,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("/users")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#set normal user" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :set_normal_user,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("/users")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#terminate" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :terminate,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to redirect_to("/users")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#restore" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :restore,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("restore")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#lock user" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :lock_user,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("lock_user")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#unlock user" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :unlock_user,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to render_template("unlock_user")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  describe "#activate" do
    before do
      @user = create(:user)
      session[:user_id] = @user.id
      get :activate,:id => @user.id
    end
    context "user is correct user or user is admin and is logged on to the system" do
      it {expect(response).to have_http_status(200)}
      it {expect(response.content_type).to eq("text/html") }
      it {expect(response).to redirect_to("/users")}
    end
    context "user is not logged on to the system" do
      it {expect(response).to redirect_to(login_path)}
      it {flash[:danger].should eq("Please log in.")}
    end
  end
  def user
    @user ||= User.new
  end

  describe "Get destroy" do
    context "when user is logged in" do
          before do
            @user = create(:user)
            session[:user_id] = @user.id
            get :destroy,:id=>@user.id
          end

          it {assigns(:user).to eq(@user)}
          it {expect(response.status).to eq(200) }
          it {expect(response.content_type).to eq("text/html") }
          it {flash[:success].should eq("User deleted.")}
          it {expect(response).to redirect_to("/users")}
        end
  end
end
